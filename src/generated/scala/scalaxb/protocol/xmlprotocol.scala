// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package scalaxb.protocol

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[scalaxb.protocol.Foo](node)
val document = scalaxb.toXML[scalaxb.protocol.Foo](obj, "foo", scalaxb.protocol.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://uniprot.org/uniprot",
    Some("tns") -> "http://uniprot.org/uniprot",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val XsdUniprotFormat: scalaxb.XMLFormat[com.bio4j.xsd.Uniprot] = new DefaultXsdUniprotFormat {}
  implicit lazy val XsdDatasetFormat: scalaxb.XMLFormat[com.bio4j.xsd.Dataset] = new DefaultXsdDatasetFormat {}
  implicit lazy val XsdEntryFormat: scalaxb.XMLFormat[com.bio4j.xsd.Entry] = new DefaultXsdEntryFormat {}
  implicit lazy val XsdDomainFormat: scalaxb.XMLFormat[com.bio4j.xsd.Domain] = new DefaultXsdDomainFormat {}
  implicit lazy val XsdComponentFormat: scalaxb.XMLFormat[com.bio4j.xsd.Component] = new DefaultXsdComponentFormat {}
  implicit lazy val XsdProteinTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.ProteinType] = new DefaultXsdProteinTypeFormat {}
  implicit lazy val XsdRecommendedNameFormat: scalaxb.XMLFormat[com.bio4j.xsd.RecommendedName] = new DefaultXsdRecommendedNameFormat {}
  implicit lazy val XsdAlternativeNameFormat: scalaxb.XMLFormat[com.bio4j.xsd.AlternativeName] = new DefaultXsdAlternativeNameFormat {}
  implicit lazy val XsdSubmittedNameFormat: scalaxb.XMLFormat[com.bio4j.xsd.SubmittedName] = new DefaultXsdSubmittedNameFormat {}
  implicit lazy val XsdGeneTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.GeneType] = new DefaultXsdGeneTypeFormat {}
  implicit lazy val XsdTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.Type] = new DefaultXsdTypeFormat {}
  implicit lazy val XsdGeneNameTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.GeneNameType] = new DefaultXsdGeneNameTypeFormat {}
  implicit lazy val XsdLineageFormat: scalaxb.XMLFormat[com.bio4j.xsd.Lineage] = new DefaultXsdLineageFormat {}
  implicit lazy val XsdOrganismTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.OrganismType] = new DefaultXsdOrganismTypeFormat {}
  implicit lazy val XsdTypeTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.TypeType] = new DefaultXsdTypeTypeFormat {}
  implicit lazy val XsdOrganismNameTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.OrganismNameType] = new DefaultXsdOrganismNameTypeFormat {}
  implicit lazy val XsdTypeType2Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType2] = new DefaultXsdTypeType2Format {}
  implicit lazy val XsdGeneLocationTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.GeneLocationType] = new DefaultXsdGeneLocationTypeFormat {}
  implicit lazy val XsdStatusFormat: scalaxb.XMLFormat[com.bio4j.xsd.Status] = new DefaultXsdStatusFormat {}
  implicit lazy val XsdStatusTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.StatusType] = new DefaultXsdStatusTypeFormat {}
  implicit lazy val XsdReferenceTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.ReferenceType] = new DefaultXsdReferenceTypeFormat {}
  implicit lazy val XsdTypeType3Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType3] = new DefaultXsdTypeType3Format {}
  implicit lazy val XsdCitationTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.CitationType] = new DefaultXsdCitationTypeFormat {}
  implicit lazy val XsdConsortiumTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.ConsortiumType] = new DefaultXsdConsortiumTypeFormat {}
  implicit lazy val XsdPersonTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.PersonType] = new DefaultXsdPersonTypeFormat {}
  implicit lazy val XsdNameListTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.NameListType] = new DefaultXsdNameListTypeFormat {}
  implicit lazy val XsdStrainFormat: scalaxb.XMLFormat[com.bio4j.xsd.Strain] = new DefaultXsdStrainFormat {}
  implicit lazy val XsdPlasmidFormat: scalaxb.XMLFormat[com.bio4j.xsd.Plasmid] = new DefaultXsdPlasmidFormat {}
  implicit lazy val XsdTransposonFormat: scalaxb.XMLFormat[com.bio4j.xsd.Transposon] = new DefaultXsdTransposonFormat {}
  implicit lazy val XsdTissueFormat: scalaxb.XMLFormat[com.bio4j.xsd.Tissue] = new DefaultXsdTissueFormat {}
  implicit lazy val XsdSourceDataTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.SourceDataType] = new DefaultXsdSourceDataTypeFormat {}
  implicit lazy val XsdTypeType4Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType4] = new DefaultXsdTypeType4Format {}
  implicit lazy val XsdTypeType5Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType5] = new DefaultXsdTypeType5Format {}
  implicit lazy val XsdResourceFormat: scalaxb.XMLFormat[com.bio4j.xsd.Resource] = new DefaultXsdResourceFormat {}
  implicit lazy val XsdSequenceFormat: scalaxb.XMLFormat[com.bio4j.xsd.Sequence] = new DefaultXsdSequenceFormat {}
  implicit lazy val XsdConflictFormat: scalaxb.XMLFormat[com.bio4j.xsd.Conflict] = new DefaultXsdConflictFormat {}
  implicit lazy val XsdLinkFormat: scalaxb.XMLFormat[com.bio4j.xsd.Link] = new DefaultXsdLinkFormat {}
  implicit lazy val XsdDiseaseFormat: scalaxb.XMLFormat[com.bio4j.xsd.Disease] = new DefaultXsdDiseaseFormat {}
  implicit lazy val XsdCommentTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.CommentType] = new DefaultXsdCommentTypeFormat {}
  implicit lazy val XsdCommentTypeSequence4Format: scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence4] = new DefaultXsdCommentTypeSequence4Format {}
  implicit lazy val XsdCommentTypeSequence3Format: scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence3] = new DefaultXsdCommentTypeSequence3Format {}
  implicit lazy val XsdCommentTypeSequence5Format: scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence5] = new DefaultXsdCommentTypeSequence5Format {}
  implicit lazy val XsdCommentTypeSequence1Format: scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence1] = new DefaultXsdCommentTypeSequence1Format {}
  implicit lazy val XsdCommentTypeSequence2Format: scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence2] = new DefaultXsdCommentTypeSequence2Format {}
  implicit lazy val XsdAbsorptionFormat: scalaxb.XMLFormat[com.bio4j.xsd.Absorption] = new DefaultXsdAbsorptionFormat {}
  implicit lazy val XsdKineticsFormat: scalaxb.XMLFormat[com.bio4j.xsd.Kinetics] = new DefaultXsdKineticsFormat {}
  implicit lazy val XsdPhDependenceFormat: scalaxb.XMLFormat[com.bio4j.xsd.PhDependence] = new DefaultXsdPhDependenceFormat {}
  implicit lazy val XsdRedoxPotentialFormat: scalaxb.XMLFormat[com.bio4j.xsd.RedoxPotential] = new DefaultXsdRedoxPotentialFormat {}
  implicit lazy val XsdTemperatureDependenceFormat: scalaxb.XMLFormat[com.bio4j.xsd.TemperatureDependence] = new DefaultXsdTemperatureDependenceFormat {}
  implicit lazy val XsdCofactorTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.CofactorType] = new DefaultXsdCofactorTypeFormat {}
  implicit lazy val XsdSubcellularLocationTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.SubcellularLocationType] = new DefaultXsdSubcellularLocationTypeFormat {}
  implicit lazy val XsdTypeType6Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType6] = new DefaultXsdTypeType6Format {}
  implicit lazy val XsdEventTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.EventType] = new DefaultXsdEventTypeFormat {}
  implicit lazy val XsdNameFormat: scalaxb.XMLFormat[com.bio4j.xsd.Name] = new DefaultXsdNameFormat {}
  implicit lazy val XsdTypeType7Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType7] = new DefaultXsdTypeType7Format {}
  implicit lazy val XsdSequence2Format: scalaxb.XMLFormat[com.bio4j.xsd.Sequence2] = new DefaultXsdSequence2Format {}
  implicit lazy val XsdIsoformTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.IsoformType] = new DefaultXsdIsoformTypeFormat {}
  implicit lazy val XsdInteractantTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.InteractantType] = new DefaultXsdInteractantTypeFormat {}
  implicit lazy val XsdDbReferenceTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.DbReferenceType] = new DefaultXsdDbReferenceTypeFormat {}
  implicit lazy val XsdPropertyTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.PropertyType] = new DefaultXsdPropertyTypeFormat {}
  implicit lazy val XsdTypeType8Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType8] = new DefaultXsdTypeType8Format {}
  implicit lazy val XsdProteinExistenceTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.ProteinExistenceType] = new DefaultXsdProteinExistenceTypeFormat {}
  implicit lazy val XsdKeywordTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.KeywordType] = new DefaultXsdKeywordTypeFormat {}
  implicit lazy val XsdTypeType9Format: scalaxb.XMLFormat[com.bio4j.xsd.TypeType9] = new DefaultXsdTypeType9Format {}
  implicit lazy val XsdStatusType2Format: scalaxb.XMLFormat[com.bio4j.xsd.StatusType2] = new DefaultXsdStatusType2Format {}
  implicit lazy val XsdFeatureTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.FeatureType] = new DefaultXsdFeatureTypeFormat {}
  implicit lazy val XsdLocationTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.LocationType] = new DefaultXsdLocationTypeFormat {}
  implicit lazy val XsdLocationTypeSequence1Format: scalaxb.XMLFormat[com.bio4j.xsd.LocationTypeSequence1] = new DefaultXsdLocationTypeSequence1Format {}
  implicit lazy val XsdStatusType3Format: scalaxb.XMLFormat[com.bio4j.xsd.StatusType3] = new DefaultXsdStatusType3Format {}
  implicit lazy val XsdPositionTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.PositionType] = new DefaultXsdPositionTypeFormat {}
  implicit lazy val XsdFragmentFormat: scalaxb.XMLFormat[com.bio4j.xsd.Fragment] = new DefaultXsdFragmentFormat {}
  implicit lazy val XsdSequenceTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.SequenceType] = new DefaultXsdSequenceTypeFormat {}
  implicit lazy val XsdMoleculeTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.MoleculeType] = new DefaultXsdMoleculeTypeFormat {}
  implicit lazy val XsdEvidenceTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.EvidenceType] = new DefaultXsdEvidenceTypeFormat {}
  implicit lazy val XsdSourceTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.SourceType] = new DefaultXsdSourceTypeFormat {}
  implicit lazy val XsdImportedFromTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.ImportedFromType] = new DefaultXsdImportedFromTypeFormat {}
  implicit lazy val XsdStatusType4Format: scalaxb.XMLFormat[com.bio4j.xsd.StatusType4] = new DefaultXsdStatusType4Format {}
  implicit lazy val XsdEvidencedStringTypeFormat: scalaxb.XMLFormat[com.bio4j.xsd.EvidencedStringType] = new DefaultXsdEvidencedStringTypeFormat {}
  implicit lazy val XsdInteractantGroupSequenceFormat: scalaxb.XMLFormat[com.bio4j.xsd.InteractantGroupSequence] = new DefaultXsdInteractantGroupSequenceFormat {}
  implicit lazy val XsdSptrCitationGroupSequenceFormat: scalaxb.XMLFormat[com.bio4j.xsd.SptrCitationGroupSequence] = new DefaultXsdSptrCitationGroupSequenceFormat {}
  implicit lazy val XsdProteinNameGroupSequenceFormat: scalaxb.XMLFormat[com.bio4j.xsd.ProteinNameGroupSequence] = new DefaultXsdProteinNameGroupSequenceFormat {}
  implicit lazy val XsdBpcCommentGroupSequenceFormat: scalaxb.XMLFormat[com.bio4j.xsd.BpcCommentGroupSequence] = new DefaultXsdBpcCommentGroupSequenceFormat {}

  trait DefaultXsdUniprotFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Uniprot] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Uniprot] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "entry")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "copyright")) ^^
      { case p1 ~ p2 =>
      com.bio4j.xsd.Uniprot(p1 map { scalaxb.fromXML[com.bio4j.xsd.Entry](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.Uniprot, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.entry flatMap { scalaxb.toXML[com.bio4j.xsd.Entry](_, Some("http://uniprot.org/uniprot"), Some("entry"), __scope, false) },
        __obj.copyright map { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("copyright"), __scope, false) } getOrElse {Nil})

  }

  def buildXsdDatasetFormat = new DefaultXsdDatasetFormat {}
  trait DefaultXsdDatasetFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Dataset] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Dataset] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.Dataset.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.Dataset.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.Dataset, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdEntryFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Entry] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Entry] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "accession")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "name")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "protein")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "gene")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "organism")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "organismHost")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "geneLocation")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "reference")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "comment")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "dbReference")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "proteinExistence")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "keyword")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "feature")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "evidence")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "sequence")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      com.bio4j.xsd.Entry(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.bio4j.xsd.ProteinType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[com.bio4j.xsd.GeneType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.bio4j.xsd.OrganismType](p5, scalaxb.ElemName(node) :: stack),
        p6 map { scalaxb.fromXML[com.bio4j.xsd.OrganismType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.bio4j.xsd.GeneLocationType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[com.bio4j.xsd.ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { _.nilOption map { scalaxb.fromXML[com.bio4j.xsd.CommentType](_, scalaxb.ElemName(node) :: stack) }},
        p10 map { scalaxb.fromXML[com.bio4j.xsd.DbReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.bio4j.xsd.ProteinExistenceType](p11, scalaxb.ElemName(node) :: stack),
        p12 map { scalaxb.fromXML[com.bio4j.xsd.KeywordType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[com.bio4j.xsd.FeatureType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[com.bio4j.xsd.EvidenceType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.bio4j.xsd.SequenceType](p15, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@dataset").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.Dataset](x, scalaxb.ElemName(node) :: stack)) } map { "@dataset" -> _ },
        (node \ "@created").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@created" -> _ },
        (node \ "@modified").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@modified" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.Entry, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@dataset", _) => attr = scala.xml.Attribute(null, "dataset", __obj.dataset.toString, attr)
        case ("@created", _) => attr = scala.xml.Attribute(null, "created", __obj.created.toString, attr)
        case ("@modified", _) => attr = scala.xml.Attribute(null, "modified", __obj.modified.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Entry, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.accession flatMap { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("accession"), __scope, false) },
        __obj.name flatMap { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("name"), __scope, false) },
        scalaxb.toXML[com.bio4j.xsd.ProteinType](__obj.protein, Some("http://uniprot.org/uniprot"), Some("protein"), __scope, false),
        __obj.gene flatMap { scalaxb.toXML[com.bio4j.xsd.GeneType](_, Some("http://uniprot.org/uniprot"), Some("gene"), __scope, false) },
        scalaxb.toXML[com.bio4j.xsd.OrganismType](__obj.organism, Some("http://uniprot.org/uniprot"), Some("organism"), __scope, false),
        __obj.organismHost flatMap { scalaxb.toXML[com.bio4j.xsd.OrganismType](_, Some("http://uniprot.org/uniprot"), Some("organismHost"), __scope, false) },
        __obj.geneLocation flatMap { scalaxb.toXML[com.bio4j.xsd.GeneLocationType](_, Some("http://uniprot.org/uniprot"), Some("geneLocation"), __scope, false) },
        __obj.reference flatMap { scalaxb.toXML[com.bio4j.xsd.ReferenceType](_, Some("http://uniprot.org/uniprot"), Some("reference"), __scope, false) },
        __obj.comment flatMap { scalaxb.toXML[Option[com.bio4j.xsd.CommentType]](_, Some("http://uniprot.org/uniprot"), Some("comment"), __scope, false) },
        __obj.dbReference flatMap { scalaxb.toXML[com.bio4j.xsd.DbReferenceType](_, Some("http://uniprot.org/uniprot"), Some("dbReference"), __scope, false) },
        scalaxb.toXML[com.bio4j.xsd.ProteinExistenceType](__obj.proteinExistence, Some("http://uniprot.org/uniprot"), Some("proteinExistence"), __scope, false),
        __obj.keyword flatMap { scalaxb.toXML[com.bio4j.xsd.KeywordType](_, Some("http://uniprot.org/uniprot"), Some("keyword"), __scope, false) },
        __obj.feature flatMap { scalaxb.toXML[com.bio4j.xsd.FeatureType](_, Some("http://uniprot.org/uniprot"), Some("feature"), __scope, false) },
        __obj.evidence flatMap { scalaxb.toXML[com.bio4j.xsd.EvidenceType](_, Some("http://uniprot.org/uniprot"), Some("evidence"), __scope, false) },
        scalaxb.toXML[com.bio4j.xsd.SequenceType](__obj.sequence, Some("http://uniprot.org/uniprot"), Some("sequence"), __scope, false))

  }

  trait DefaultXsdDomainFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Domain] with XsdProteinNameGroupGroupFormat {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Domain] =
      phrase((parseProteinNameGroupGroup(node, scalaxb.ElemName(node) :: stack)) ^^
      { case p1 =>
      com.bio4j.xsd.Domain(p1) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.Domain, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.bio4j.xsd.ProteinNameGroupSequence](__obj.proteinNameGroupSequence1, None, Some("proteinNameGroupSequence1"), __scope, false))

  }

  trait DefaultXsdComponentFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Component] with XsdProteinNameGroupGroupFormat {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Component] =
      phrase((parseProteinNameGroupGroup(node, scalaxb.ElemName(node) :: stack)) ^^
      { case p1 =>
      com.bio4j.xsd.Component(p1) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.Component, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.bio4j.xsd.ProteinNameGroupSequence](__obj.proteinNameGroupSequence1, None, Some("proteinNameGroupSequence1"), __scope, false))

  }

  trait DefaultXsdProteinTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.ProteinType] with XsdProteinNameGroupGroupFormat {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("proteinType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.ProteinType] =
      phrase((parseProteinNameGroupGroup(node, scalaxb.ElemName(node) :: stack)) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "domain")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "component")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.bio4j.xsd.ProteinType(p1,
        p2 map { scalaxb.fromXML[com.bio4j.xsd.Domain](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.bio4j.xsd.Component](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.ProteinType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.bio4j.xsd.ProteinNameGroupSequence](__obj.proteinNameGroupSequence1, None, Some("proteinNameGroupSequence1"), __scope, false),
        __obj.domain flatMap { scalaxb.toXML[com.bio4j.xsd.Domain](_, Some("http://uniprot.org/uniprot"), Some("domain"), __scope, false) },
        __obj.component flatMap { scalaxb.toXML[com.bio4j.xsd.Component](_, Some("http://uniprot.org/uniprot"), Some("component"), __scope, false) })

  }

  trait DefaultXsdRecommendedNameFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.RecommendedName] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.RecommendedName] =
      phrase((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "fullName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "shortName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "ecNumber")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.bio4j.xsd.RecommendedName(scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.RecommendedName, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](__obj.fullName, Some("http://uniprot.org/uniprot"), Some("fullName"), __scope, false),
        __obj.shortName flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("shortName"), __scope, false) },
        __obj.ecNumber flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("ecNumber"), __scope, false) })

  }

  trait DefaultXsdAlternativeNameFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.AlternativeName] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.AlternativeName] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "fullName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "shortName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "ecNumber")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.bio4j.xsd.AlternativeName(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.AlternativeName, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.fullName map { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("fullName"), __scope, false) } getOrElse {Nil},
        __obj.shortName flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("shortName"), __scope, false) },
        __obj.ecNumber flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("ecNumber"), __scope, false) })

  }

  trait DefaultXsdSubmittedNameFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.SubmittedName] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.SubmittedName] =
      phrase((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "fullName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "ecNumber")) ^^
      { case p1 ~ p2 =>
      com.bio4j.xsd.SubmittedName(scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.SubmittedName, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](__obj.fullName, Some("http://uniprot.org/uniprot"), Some("fullName"), __scope, false),
        __obj.ecNumber flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("ecNumber"), __scope, false) })

  }

  trait DefaultXsdGeneTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.GeneType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("geneType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.GeneType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "name")) ^^
      { case p1 =>
      com.bio4j.xsd.GeneType(p1 map { scalaxb.fromXML[com.bio4j.xsd.GeneNameType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.GeneType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.name flatMap { scalaxb.toXML[com.bio4j.xsd.GeneNameType](_, Some("http://uniprot.org/uniprot"), Some("name"), __scope, false) })

  }

  def buildXsdTypeFormat = new DefaultXsdTypeFormat {}
  trait DefaultXsdTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Type] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Type] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.Type.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.Type.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.Type, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdGeneNameTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.GeneNameType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.GeneNameType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.GeneNameType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.GeneNameType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.Type](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.GeneNameType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.GeneNameType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdLineageFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Lineage] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Lineage] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "taxon")) ^^
      { case p1 =>
      com.bio4j.xsd.Lineage(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.Lineage, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.taxon flatMap { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("taxon"), __scope, false) })

  }

  trait DefaultXsdOrganismTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.OrganismType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("organismType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.OrganismType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "name")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "dbReference")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "lineage")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.bio4j.xsd.OrganismType(p1 map { scalaxb.fromXML[com.bio4j.xsd.OrganismNameType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.DbReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.bio4j.xsd.Lineage](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.OrganismType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.OrganismType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.name flatMap { scalaxb.toXML[com.bio4j.xsd.OrganismNameType](_, Some("http://uniprot.org/uniprot"), Some("name"), __scope, false) },
        __obj.dbReference flatMap { scalaxb.toXML[com.bio4j.xsd.DbReferenceType](_, Some("http://uniprot.org/uniprot"), Some("dbReference"), __scope, false) },
        __obj.lineage map { scalaxb.toXML[com.bio4j.xsd.Lineage](_, Some("http://uniprot.org/uniprot"), Some("lineage"), __scope, false) } getOrElse {Nil})

  }

  def buildXsdTypeTypeFormat = new DefaultXsdTypeTypeFormat {}
  trait DefaultXsdTypeTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdOrganismNameTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.OrganismNameType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.OrganismNameType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.OrganismNameType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.OrganismNameType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.OrganismNameType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.OrganismNameType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  def buildXsdTypeType2Format = new DefaultXsdTypeType2Format {}
  trait DefaultXsdTypeType2Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType2] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType2] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType2.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdGeneLocationTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.GeneLocationType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("geneLocationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.GeneLocationType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "name")) ^^
      { case p1 =>
      com.bio4j.xsd.GeneLocationType(p1 map { scalaxb.fromXML[com.bio4j.xsd.StatusType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType2](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.GeneLocationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.GeneLocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.name flatMap { scalaxb.toXML[com.bio4j.xsd.StatusType](_, Some("http://uniprot.org/uniprot"), Some("name"), __scope, false) })

  }

  def buildXsdStatusFormat = new DefaultXsdStatusFormat {}
  trait DefaultXsdStatusFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Status] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Status] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.Status.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.Status.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.Status, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdStatusTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.StatusType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.StatusType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.StatusType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.StatusType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.Status](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.bio4j.xsd.Status](scala.xml.Text("known"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.StatusType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@status", _) => if (__obj.status.toString != "known") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.StatusType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdReferenceTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.ReferenceType] with XsdSptrCitationGroupGroupFormat {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("referenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.ReferenceType] =
      phrase((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "citation")) ~ 
      (parseSptrCitationGroupGroup(node, scalaxb.ElemName(node) :: stack)) ^^
      { case p1 ~ p2 =>
      com.bio4j.xsd.ReferenceType(scalaxb.fromXML[com.bio4j.xsd.CitationType](p1, scalaxb.ElemName(node) :: stack),
        p2,
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ },
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.ReferenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.key.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[com.bio4j.xsd.CitationType](__obj.citation, Some("http://uniprot.org/uniprot"), Some("citation"), __scope, false),
        scalaxb.toXML[com.bio4j.xsd.SptrCitationGroupSequence](__obj.sptrCitationGroupSequence2, None, Some("sptrCitationGroupSequence2"), __scope, false))

  }

  def buildXsdTypeType3Format = new DefaultXsdTypeType3Format {}
  trait DefaultXsdTypeType3Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType3] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType3] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType3.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdCitationTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.CitationType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("citationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.CitationType] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "title")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "editorList")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "authorList")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "locator")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "dbReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      com.bio4j.xsd.CitationType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.bio4j.xsd.NameListType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.bio4j.xsd.NameListType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[com.bio4j.xsd.DbReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType3](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@date").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@date" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@volume").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@volume" -> _ },
        (node \ "@first").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@first" -> _ },
        (node \ "@last").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@last" -> _ },
        (node \ "@publisher").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@publisher" -> _ },
        (node \ "@city").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@city" -> _ },
        (node \ "@db").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@db" -> _ },
        (node \ "@number").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@number" -> _ },
        (node \ "@institute").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@institute" -> _ },
        (node \ "@country").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@country" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.CitationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@date", _) => __obj.date foreach { x => attr = scala.xml.Attribute(null, "date", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@volume", _) => __obj.volume foreach { x => attr = scala.xml.Attribute(null, "volume", x.toString, attr) }
        case ("@first", _) => __obj.first foreach { x => attr = scala.xml.Attribute(null, "first", x.toString, attr) }
        case ("@last", _) => __obj.last foreach { x => attr = scala.xml.Attribute(null, "last", x.toString, attr) }
        case ("@publisher", _) => __obj.publisher foreach { x => attr = scala.xml.Attribute(null, "publisher", x.toString, attr) }
        case ("@city", _) => __obj.city foreach { x => attr = scala.xml.Attribute(null, "city", x.toString, attr) }
        case ("@db", _) => __obj.db foreach { x => attr = scala.xml.Attribute(null, "db", x.toString, attr) }
        case ("@number", _) => __obj.number foreach { x => attr = scala.xml.Attribute(null, "number", x.toString, attr) }
        case ("@institute", _) => __obj.institute foreach { x => attr = scala.xml.Attribute(null, "institute", x.toString, attr) }
        case ("@country", _) => __obj.country foreach { x => attr = scala.xml.Attribute(null, "country", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.CitationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.title map { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("title"), __scope, false) } getOrElse {Nil},
        __obj.editorList map { scalaxb.toXML[com.bio4j.xsd.NameListType](_, Some("http://uniprot.org/uniprot"), Some("editorList"), __scope, false) } getOrElse {Nil},
        __obj.authorList map { scalaxb.toXML[com.bio4j.xsd.NameListType](_, Some("http://uniprot.org/uniprot"), Some("authorList"), __scope, false) } getOrElse {Nil},
        __obj.locator map { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("locator"), __scope, false) } getOrElse {Nil},
        __obj.dbReference flatMap { scalaxb.toXML[com.bio4j.xsd.DbReferenceType](_, Some("http://uniprot.org/uniprot"), Some("dbReference"), __scope, false) })

  }

  trait DefaultXsdConsortiumTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.ConsortiumType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.ConsortiumType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.ConsortiumType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.ConsortiumType(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.ConsortiumType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.ConsortiumType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultXsdPersonTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.PersonType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.PersonType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.PersonType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.PersonType(scala.collection.immutable.ListMap(List(
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.PersonType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.PersonType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultXsdNameListTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.NameListType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("nameListType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.NameListType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "consortium")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.ConsortiumType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "person")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.PersonType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.bio4j.xsd.NameListType(p1) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.NameListType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.namelisttypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.bio4j.xsd.NameListTypeOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultXsdStrainFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Strain] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Strain] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Strain] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Strain(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Strain, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Strain, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdPlasmidFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Plasmid] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Plasmid] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Plasmid] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Plasmid(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Plasmid, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Plasmid, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdTransposonFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Transposon] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Transposon] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Transposon] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Transposon(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Transposon, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Transposon, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdTissueFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Tissue] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Tissue] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Tissue] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Tissue(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Tissue, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Tissue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdSourceDataTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.SourceDataType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("sourceDataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.SourceDataType] =
      phrase(safeRep(((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "strain")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Strain](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "plasmid")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Plasmid](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "transposon")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Transposon](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "tissue")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Tissue](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.bio4j.xsd.SourceDataType(p1) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.SourceDataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.sourcedatatypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[com.bio4j.xsd.SourceDataTypeOption]](x, x.namespace, x.key, __scope, false) })

  }

  def buildXsdTypeType4Format = new DefaultXsdTypeType4Format {}
  trait DefaultXsdTypeType4Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType4] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType4] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType4.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType4.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType4, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildXsdTypeType5Format = new DefaultXsdTypeType5Format {}
  trait DefaultXsdTypeType5Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType5] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType5] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType5.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType5.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType5, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildXsdResourceFormat = new DefaultXsdResourceFormat {}
  trait DefaultXsdResourceFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Resource] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Resource] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.Resource.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.Resource.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.Resource, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdSequenceFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Sequence] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Sequence] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Sequence] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Sequence(scala.collection.immutable.ListMap(List(
        (node \ "@resource").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.Resource](x, scalaxb.ElemName(node) :: stack)) } map { "@resource" -> _ },
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Sequence, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@resource", _) => attr = scala.xml.Attribute(null, "resource", __obj.resource.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@version", _) => __obj.version foreach { x => attr = scala.xml.Attribute(null, "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Sequence, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultXsdConflictFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Conflict] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Conflict] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "sequence")) ^^
      { case p1 =>
      com.bio4j.xsd.Conflict(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.Sequence](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType5](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@ref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.Conflict, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@ref", _) => __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Conflict, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.sequence map { scalaxb.toXML[com.bio4j.xsd.Sequence](_, Some("http://uniprot.org/uniprot"), Some("sequence"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXsdLinkFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Link] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Link] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Link] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Link(scala.collection.immutable.ListMap(List(
        (node \ "@uri").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[java.net.URI](x, scalaxb.ElemName(node) :: stack)) } map { "@uri" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Link, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@uri", _) => attr = scala.xml.Attribute(null, "uri", __obj.uri.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Link, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultXsdDiseaseFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Disease] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Disease] =
      phrase((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "name")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "acronym")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "description")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "dbReference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.bio4j.xsd.Disease(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.bio4j.xsd.DbReferenceType](p4, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.Disease, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Disease, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://uniprot.org/uniprot"), Some("name"), __scope, false),
        scalaxb.toXML[String](__obj.acronym, Some("http://uniprot.org/uniprot"), Some("acronym"), __scope, false),
        scalaxb.toXML[String](__obj.description, Some("http://uniprot.org/uniprot"), Some("description"), __scope, false),
        scalaxb.toXML[com.bio4j.xsd.DbReferenceType](__obj.dbReference, Some("http://uniprot.org/uniprot"), Some("dbReference"), __scope, false))

  }

  trait DefaultXsdCommentTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.CommentType] with XsdBpcCommentGroupGroupFormat {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("commentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.CommentType] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "molecule")) ~ 
      opt((parseBpcCommentGroupGroup(node, scalaxb.ElemName(node) :: stack, true)) ||| 
      ((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "cofactor"))) ^^ 
        { case p1 => scalaxb.DataRecord(com.bio4j.xsd.CommentTypeSequence1(p1 map { scalaxb.fromXML[com.bio4j.xsd.CofactorType](_, scalaxb.ElemName(node) :: stack) }: _*)) }) ||| 
      ((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "subcellularLocation"))) ^^ 
        { case p1 => scalaxb.DataRecord(com.bio4j.xsd.CommentTypeSequence2(p1 map { scalaxb.fromXML[com.bio4j.xsd.SubcellularLocationType](_, scalaxb.ElemName(node) :: stack) }: _*)) }) ||| 
      ((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "conflict")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Conflict](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "link"))) ^^ 
        { case p1 => scalaxb.DataRecord(com.bio4j.xsd.CommentTypeSequence3(p1 map { scalaxb.fromXML[com.bio4j.xsd.Link](_, scalaxb.ElemName(node) :: stack) }: _*)) }) ||| 
      ((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "event")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "isoform"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(com.bio4j.xsd.CommentTypeSequence4(p1 map { scalaxb.fromXML[com.bio4j.xsd.EventType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.IsoformType](_, scalaxb.ElemName(node) :: stack) })) }) ||| 
      ((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "interactant")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "organismsDiffer")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "experiments"))) ^^ 
        { case p1 ~ p2 ~ p3 => scalaxb.DataRecord(com.bio4j.xsd.CommentTypeSequence5(p1 map { scalaxb.fromXML[com.bio4j.xsd.InteractantType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) } getOrElse { scalaxb.fromXML[Boolean](scala.xml.Text("false"), scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack))) }) ||| 
      ((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "disease")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Disease](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "location")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "text")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.bio4j.xsd.CommentType(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.MoleculeType](_, scalaxb.ElemName(node) :: stack) },
        p2,
        p3 map { scalaxb.fromXML[com.bio4j.xsd.LocationType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType4](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@locationType").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@locationType" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ },
        (node \ "@mass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Float](x, scalaxb.ElemName(node) :: stack)) } map { "@mass" -> _ },
        (node \ "@error").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@error" -> _ },
        (node \ "@method").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@method" -> _ },
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.CommentType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@locationType", _) => __obj.locationType foreach { x => attr = scala.xml.Attribute(null, "locationType", x.toString, attr) }
        case ("@name", _) => __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
        case ("@mass", _) => __obj.mass foreach { x => attr = scala.xml.Attribute(null, "mass", x.toString, attr) }
        case ("@error", _) => __obj.error foreach { x => attr = scala.xml.Attribute(null, "error", x.toString, attr) }
        case ("@method", _) => __obj.method foreach { x => attr = scala.xml.Attribute(null, "method", x.toString, attr) }
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.CommentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.molecule map { scalaxb.toXML[com.bio4j.xsd.MoleculeType](_, Some("http://uniprot.org/uniprot"), Some("molecule"), __scope, false) } getOrElse {Nil},
        __obj.commenttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.location flatMap { scalaxb.toXML[com.bio4j.xsd.LocationType](_, Some("http://uniprot.org/uniprot"), Some("location"), __scope, false) },
        __obj.text flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("text"), __scope, false) })

  }

  trait DefaultXsdCommentTypeSequence4Format extends scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence4] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.CommentTypeSequence4] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.CommentTypeSequence4, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.event flatMap { scalaxb.toXML[com.bio4j.xsd.EventType](_, Some("http://uniprot.org/uniprot"), Some("event"), __scope, false) },
        __obj.isoform flatMap { scalaxb.toXML[com.bio4j.xsd.IsoformType](_, Some("http://uniprot.org/uniprot"), Some("isoform"), __scope, false) })


  }

  trait DefaultXsdCommentTypeSequence3Format extends scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.CommentTypeSequence3] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.CommentTypeSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.link flatMap { scalaxb.toXML[com.bio4j.xsd.Link](_, Some("http://uniprot.org/uniprot"), Some("link"), __scope, false) }


  }

  trait DefaultXsdCommentTypeSequence5Format extends scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence5] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.CommentTypeSequence5] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.CommentTypeSequence5, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.interactant flatMap { scalaxb.toXML[com.bio4j.xsd.InteractantType](_, Some("http://uniprot.org/uniprot"), Some("interactant"), __scope, false) },
        scalaxb.toXML[Boolean](__obj.organismsDiffer, Some("http://uniprot.org/uniprot"), Some("organismsDiffer"), __scope, false),
        scalaxb.toXML[Int](__obj.experiments, Some("http://uniprot.org/uniprot"), Some("experiments"), __scope, false))


  }

  trait DefaultXsdCommentTypeSequence1Format extends scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.CommentTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.CommentTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.cofactor flatMap { scalaxb.toXML[com.bio4j.xsd.CofactorType](_, Some("http://uniprot.org/uniprot"), Some("cofactor"), __scope, false) }


  }

  trait DefaultXsdCommentTypeSequence2Format extends scalaxb.XMLFormat[com.bio4j.xsd.CommentTypeSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.CommentTypeSequence2] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.CommentTypeSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      __obj.subcellularLocation flatMap { scalaxb.toXML[com.bio4j.xsd.SubcellularLocationType](_, Some("http://uniprot.org/uniprot"), Some("subcellularLocation"), __scope, false) }


  }

  trait DefaultXsdAbsorptionFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Absorption] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Absorption] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "max")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "text")) ^^
      { case p1 ~ p2 =>
      com.bio4j.xsd.Absorption(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.Absorption, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.max map { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("max"), __scope, false) } getOrElse {Nil},
        __obj.text flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("text"), __scope, false) })

  }

  trait DefaultXsdKineticsFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.Kinetics] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.Kinetics] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "KM")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "Vmax")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "text")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.bio4j.xsd.Kinetics(p1 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.Kinetics, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.KM flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("KM"), __scope, false) },
        __obj.Vmax flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("Vmax"), __scope, false) },
        __obj.text flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("text"), __scope, false) })

  }

  trait DefaultXsdPhDependenceFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.PhDependence] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.PhDependence] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "text")) ^^
      { case p1 =>
      com.bio4j.xsd.PhDependence(p1 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.PhDependence, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.text flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("text"), __scope, false) })

  }

  trait DefaultXsdRedoxPotentialFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.RedoxPotential] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.RedoxPotential] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "text")) ^^
      { case p1 =>
      com.bio4j.xsd.RedoxPotential(p1 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.RedoxPotential, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.text flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("text"), __scope, false) })

  }

  trait DefaultXsdTemperatureDependenceFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.TemperatureDependence] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.TemperatureDependence] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "text")) ^^
      { case p1 =>
      com.bio4j.xsd.TemperatureDependence(p1 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.TemperatureDependence, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.text flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("text"), __scope, false) })

  }

  trait DefaultXsdCofactorTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.CofactorType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("cofactorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.CofactorType] =
      phrase((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "name")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "dbReference")) ^^
      { case p1 ~ p2 =>
      com.bio4j.xsd.CofactorType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.bio4j.xsd.DbReferenceType](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.CofactorType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.CofactorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.name, Some("http://uniprot.org/uniprot"), Some("name"), __scope, false),
        scalaxb.toXML[com.bio4j.xsd.DbReferenceType](__obj.dbReference, Some("http://uniprot.org/uniprot"), Some("dbReference"), __scope, false))

  }

  trait DefaultXsdSubcellularLocationTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.SubcellularLocationType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("subcellularLocationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.SubcellularLocationType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "location")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "topology")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "orientation")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.bio4j.xsd.SubcellularLocationType(p1 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.SubcellularLocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.location flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("location"), __scope, false) },
        __obj.topology flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("topology"), __scope, false) },
        __obj.orientation flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("orientation"), __scope, false) })

  }

  def buildXsdTypeType6Format = new DefaultXsdTypeType6Format {}
  trait DefaultXsdTypeType6Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType6] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType6] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType6.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType6.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType6, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdEventTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.EventType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.EventType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.EventType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.EventType(scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType6](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.EventType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.EventType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultXsdNameFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Name] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Name] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Name] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Name(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Name, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Name, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  def buildXsdTypeType7Format = new DefaultXsdTypeType7Format {}
  trait DefaultXsdTypeType7Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType7] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType7] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType7.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType7.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType7, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdSequence2Format extends scalaxb.XMLFormat[com.bio4j.xsd.Sequence2] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.Sequence2] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Sequence2] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.Sequence2(scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType7](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@ref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.Sequence2, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@ref", _) => __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.Sequence2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultXsdIsoformTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.IsoformType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("isoformType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.IsoformType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "id")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "name")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "sequence")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "text")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      com.bio4j.xsd.IsoformType(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.Name](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.bio4j.xsd.Sequence2](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.IsoformType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.id flatMap { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("id"), __scope, false) },
        __obj.name flatMap { scalaxb.toXML[com.bio4j.xsd.Name](_, Some("http://uniprot.org/uniprot"), Some("name"), __scope, false) },
        scalaxb.toXML[com.bio4j.xsd.Sequence2](__obj.sequence, Some("http://uniprot.org/uniprot"), Some("sequence"), __scope, false),
        __obj.text flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("text"), __scope, false) })

  }

  trait DefaultXsdInteractantTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.InteractantType] with XsdInteractantGroupGroupFormat {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("interactantType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.InteractantType] =
      phrase(opt(parseInteractantGroupGroup(node, scalaxb.ElemName(node) :: stack)) ^^
      { case p1 =>
      com.bio4j.xsd.InteractantType(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@intactId").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@intactId" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.InteractantType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@intactId", _) => attr = scala.xml.Attribute(null, "intactId", __obj.intactId.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.InteractantType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.interactantGroupSequence1 map { scalaxb.toXML[com.bio4j.xsd.InteractantGroupSequence](_, None, Some("interactantGroupSequence1"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXsdDbReferenceTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.DbReferenceType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("dbReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.DbReferenceType] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "molecule")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "property")) ^^
      { case p1 ~ p2 =>
      com.bio4j.xsd.DbReferenceType(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.MoleculeType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.PropertyType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.DbReferenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.DbReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.molecule map { scalaxb.toXML[com.bio4j.xsd.MoleculeType](_, Some("http://uniprot.org/uniprot"), Some("molecule"), __scope, false) } getOrElse {Nil},
        __obj.property flatMap { scalaxb.toXML[com.bio4j.xsd.PropertyType](_, Some("http://uniprot.org/uniprot"), Some("property"), __scope, false) })

  }

  trait DefaultXsdPropertyTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.PropertyType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.PropertyType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.PropertyType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.PropertyType(scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@value").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@value" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.PropertyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@value", _) => attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.PropertyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildXsdTypeType8Format = new DefaultXsdTypeType8Format {}
  trait DefaultXsdTypeType8Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType8] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType8] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType8.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType8.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType8, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdProteinExistenceTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.ProteinExistenceType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.ProteinExistenceType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.ProteinExistenceType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.ProteinExistenceType(scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType8](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.ProteinExistenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.ProteinExistenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultXsdKeywordTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.KeywordType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.KeywordType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.KeywordType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.KeywordType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ },
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.KeywordType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case ("@id", _) => attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.KeywordType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  def buildXsdTypeType9Format = new DefaultXsdTypeType9Format {}
  trait DefaultXsdTypeType9Format extends scalaxb.XMLFormat[com.bio4j.xsd.TypeType9] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.TypeType9] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.TypeType9.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.TypeType9.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.TypeType9, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  def buildXsdStatusType2Format = new DefaultXsdStatusType2Format {}
  trait DefaultXsdStatusType2Format extends scalaxb.XMLFormat[com.bio4j.xsd.StatusType2] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.StatusType2] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.StatusType2.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.StatusType2.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.StatusType2, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdFeatureTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.FeatureType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("featureType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.FeatureType] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "original")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "variation")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "location")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.bio4j.xsd.FeatureType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[com.bio4j.xsd.LocationType](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.TypeType9](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.StatusType2](x, scalaxb.ElemName(node) :: stack)) } map { "@status" -> _ },
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ },
        (node \ "@description").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@description" -> _ },
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ },
        (node \ "@ref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.FeatureType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@status", _) => __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case ("@description", _) => __obj.description foreach { x => attr = scala.xml.Attribute(null, "description", x.toString, attr) }
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case ("@ref", _) => __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.FeatureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.original map { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("original"), __scope, false) } getOrElse {Nil},
        __obj.variation flatMap { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("variation"), __scope, false) },
        scalaxb.toXML[com.bio4j.xsd.LocationType](__obj.location, Some("http://uniprot.org/uniprot"), Some("location"), __scope, false))

  }

  trait DefaultXsdLocationTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.LocationType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("locationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.LocationType] =
      phrase(((((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "begin")) ~ 
      (scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "end"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(com.bio4j.xsd.LocationTypeSequence1(scalaxb.fromXML[com.bio4j.xsd.PositionType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[com.bio4j.xsd.PositionType](p2, scalaxb.ElemName(node) :: stack))) }) ||| 
      ((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "position")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.PositionType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      com.bio4j.xsd.LocationType(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@sequence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@sequence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.LocationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@sequence", _) => __obj.sequence foreach { x => attr = scala.xml.Attribute(null, "sequence", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.LocationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.locationtypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[com.bio4j.xsd.LocationTypeOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultXsdLocationTypeSequence1Format extends scalaxb.XMLFormat[com.bio4j.xsd.LocationTypeSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.LocationTypeSequence1] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.LocationTypeSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[com.bio4j.xsd.PositionType](__obj.begin, Some("http://uniprot.org/uniprot"), Some("begin"), __scope, false),
        scalaxb.toXML[com.bio4j.xsd.PositionType](__obj.end, Some("http://uniprot.org/uniprot"), Some("end"), __scope, false))


  }

  def buildXsdStatusType3Format = new DefaultXsdStatusType3Format {}
  trait DefaultXsdStatusType3Format extends scalaxb.XMLFormat[com.bio4j.xsd.StatusType3] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.StatusType3] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.StatusType3.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.StatusType3.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.StatusType3, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdPositionTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.PositionType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.PositionType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.PositionType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.PositionType(scala.collection.immutable.ListMap(List(
        (node \ "@position").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@position" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.StatusType3](x, scalaxb.ElemName(node) :: stack)) } orElse Some(scalaxb.DataRecord(None, None, scalaxb.fromXML[com.bio4j.xsd.StatusType3](scala.xml.Text("certain"), scalaxb.ElemName(node) :: stack))) map { "@status" -> _ },
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.PositionType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@position", _) => __obj.position foreach { x => attr = scala.xml.Attribute(null, "position", x.toString, attr) }
        case ("@status", _) => if (__obj.status.toString != "certain") attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.PositionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  def buildXsdFragmentFormat = new DefaultXsdFragmentFormat {}
  trait DefaultXsdFragmentFormat extends scalaxb.XMLFormat[com.bio4j.xsd.Fragment] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.Fragment] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.Fragment.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.Fragment.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.Fragment, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdSequenceTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.SequenceType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.SequenceType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.SequenceType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.SequenceType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@length").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@length" -> _ },
        (node \ "@mass").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@mass" -> _ },
        (node \ "@checksum").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@checksum" -> _ },
        (node \ "@modified").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@modified" -> _ },
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Int](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ },
        (node \ "@precursor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@precursor" -> _ },
        (node \ "@fragment").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.Fragment](x, scalaxb.ElemName(node) :: stack)) } map { "@fragment" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.SequenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@length", _) => attr = scala.xml.Attribute(null, "length", __obj.length.toString, attr)
        case ("@mass", _) => attr = scala.xml.Attribute(null, "mass", __obj.mass.toString, attr)
        case ("@checksum", _) => attr = scala.xml.Attribute(null, "checksum", __obj.checksum.toString, attr)
        case ("@modified", _) => attr = scala.xml.Attribute(null, "modified", __obj.modified.toString, attr)
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case ("@precursor", _) => __obj.precursor foreach { x => attr = scala.xml.Attribute(null, "precursor", x.toString, attr) }
        case ("@fragment", _) => __obj.fragment foreach { x => attr = scala.xml.Attribute(null, "fragment", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.SequenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdMoleculeTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.MoleculeType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.MoleculeType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.MoleculeType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.MoleculeType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@id" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.MoleculeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@id", _) => __obj.id foreach { x => attr = scala.xml.Attribute(null, "id", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.MoleculeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultXsdEvidenceTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.EvidenceType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("evidenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.EvidenceType] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "source")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "importedFrom")) ^^
      { case p1 ~ p2 =>
      com.bio4j.xsd.EvidenceType(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.SourceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.bio4j.xsd.ImportedFromType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.EvidenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.key.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.EvidenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.source map { scalaxb.toXML[com.bio4j.xsd.SourceType](_, Some("http://uniprot.org/uniprot"), Some("source"), __scope, false) } getOrElse {Nil},
        __obj.importedFrom map { scalaxb.toXML[com.bio4j.xsd.ImportedFromType](_, Some("http://uniprot.org/uniprot"), Some("importedFrom"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXsdSourceTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.SourceType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("sourceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.SourceType] =
      phrase(opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "dbReference")) ^^
      { case p1 =>
      com.bio4j.xsd.SourceType(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.DbReferenceType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@ref").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@ref" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: com.bio4j.xsd.SourceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ref", _) => __obj.ref foreach { x => attr = scala.xml.Attribute(null, "ref", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.SourceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.dbReference map { scalaxb.toXML[com.bio4j.xsd.DbReferenceType](_, Some("http://uniprot.org/uniprot"), Some("dbReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultXsdImportedFromTypeFormat extends scalaxb.ElemNameParser[com.bio4j.xsd.ImportedFromType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    override def typeName: Option[String] = Some("importedFromType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.ImportedFromType] =
      phrase((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "dbReference")) ^^
      { case p1 =>
      com.bio4j.xsd.ImportedFromType(scalaxb.fromXML[com.bio4j.xsd.DbReferenceType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: com.bio4j.xsd.ImportedFromType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[com.bio4j.xsd.DbReferenceType](__obj.dbReference, Some("http://uniprot.org/uniprot"), Some("dbReference"), __scope, false))

  }

  def buildXsdStatusType4Format = new DefaultXsdStatusType4Format {}
  trait DefaultXsdStatusType4Format extends scalaxb.XMLFormat[com.bio4j.xsd.StatusType4] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.StatusType4] = seq match {
      case elem: scala.xml.Elem => Right(com.bio4j.xsd.StatusType4.fromString(elem.text, elem.scope))
      case _ => Right(com.bio4j.xsd.StatusType4.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: com.bio4j.xsd.StatusType4, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultXsdEvidencedStringTypeFormat extends scalaxb.XMLFormat[com.bio4j.xsd.EvidencedStringType] with scalaxb.CanWriteChildNodes[com.bio4j.xsd.EvidencedStringType] {
    val targetNamespace: Option[String] = Some("http://uniprot.org/uniprot")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.EvidencedStringType] = seq match {
      case node: scala.xml.Node => Right(com.bio4j.xsd.EvidencedStringType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@evidence").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Seq[Int]](x, scalaxb.ElemName(node) :: stack)) } map { "@evidence" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[com.bio4j.xsd.StatusType4](x, scalaxb.ElemName(node) :: stack)) } map { "@status" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: com.bio4j.xsd.EvidencedStringType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@evidence", _) => __obj.evidence foreach { x => attr = scala.xml.Attribute(null, "evidence", x.map(x => x.toString).mkString(" "), attr) }
        case ("@status", _) => __obj.status foreach { x => attr = scala.xml.Attribute(null, "status", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: com.bio4j.xsd.EvidencedStringType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }


  trait XsdInteractantGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseInteractantGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.InteractantGroupSequence] =
      (((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "label"))) ^^ 
        { case p1 ~ p2 => com.bio4j.xsd.InteractantGroupSequence(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
  
    def parseInteractantGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "id")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "label"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(com.bio4j.xsd.InteractantGroupSequence(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) })) })
    
    def parsemixedInteractantGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "id")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "label")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(Seq(p1),
        p2.toList,
        p3.toList,
        p4.toList) })
  }

  trait DefaultXsdInteractantGroupSequenceFormat extends scalaxb.XMLFormat[com.bio4j.xsd.InteractantGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.InteractantGroupSequence] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.InteractantGroupSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[String](__obj.id, Some("http://uniprot.org/uniprot"), Some("id"), __scope, false),
        __obj.label map { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("label"), __scope, false) } getOrElse {Nil})


  }


/** Groups a citation's scope and source descriptions.
*/
  trait XsdSptrCitationGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseSptrCitationGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.SptrCitationGroupSequence] =
      ((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "scope")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "source"))) ^^ 
        { case p1 ~ p2 => com.bio4j.xsd.SptrCitationGroupSequence(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.bio4j.xsd.SourceDataType](_, scalaxb.ElemName(node) :: stack) }) })
  
    def parseSptrCitationGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      ((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "scope")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "source"))) ^^ 
        { case p1 ~ p2 => scalaxb.DataRecord(com.bio4j.xsd.SptrCitationGroupSequence(p1 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.bio4j.xsd.SourceDataType](_, scalaxb.ElemName(node) :: stack) })) })
    
    def parsemixedSptrCitationGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      (((safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "scope")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "source")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.SourceDataType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 => Seq.concat(p1,
        p2.toList,
        p3.toList,
        p4.toList) })
  }

  trait DefaultXsdSptrCitationGroupSequenceFormat extends scalaxb.XMLFormat[com.bio4j.xsd.SptrCitationGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.SptrCitationGroupSequence] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.SptrCitationGroupSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.scope flatMap { scalaxb.toXML[String](_, Some("http://uniprot.org/uniprot"), Some("scope"), __scope, false) },
        __obj.source map { scalaxb.toXML[com.bio4j.xsd.SourceDataType](_, Some("http://uniprot.org/uniprot"), Some("source"), __scope, false) } getOrElse {Nil})


  }


  trait XsdProteinNameGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseProteinNameGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.ProteinNameGroupSequence] =
      ((opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "recommendedName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "alternativeName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "submittedName")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "allergenName")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "biotechName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "cdAntigenName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "innName"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 => com.bio4j.xsd.ProteinNameGroupSequence(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.RecommendedName](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.AlternativeName](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.bio4j.xsd.SubmittedName](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) }) })
  
    def parseProteinNameGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      ((opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "recommendedName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "alternativeName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "submittedName")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "allergenName")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "biotechName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "cdAntigenName")) ~ 
      safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "innName"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 => scalaxb.DataRecord(com.bio4j.xsd.ProteinNameGroupSequence(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.RecommendedName](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[com.bio4j.xsd.AlternativeName](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[com.bio4j.xsd.SubmittedName](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](_, scalaxb.ElemName(node) :: stack) })) })
    
    def parsemixedProteinNameGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      (((opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "recommendedName")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.RecommendedName](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "alternativeName")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.AlternativeName](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "submittedName")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.SubmittedName](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "allergenName")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "biotechName")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "cdAntigenName")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (safeRep(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "innName")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.EvidencedStringType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 => Seq.concat(p1.toList,
        p2.toList,
        p3,
        p4.toList,
        p5,
        p6.toList,
        p7.toList,
        p8.toList,
        p9.toList,
        p10.toList,
        p11,
        p12.toList,
        p13,
        p14.toList) })
  }

  trait DefaultXsdProteinNameGroupSequenceFormat extends scalaxb.XMLFormat[com.bio4j.xsd.ProteinNameGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.ProteinNameGroupSequence] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.ProteinNameGroupSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.recommendedName map { scalaxb.toXML[com.bio4j.xsd.RecommendedName](_, Some("http://uniprot.org/uniprot"), Some("recommendedName"), __scope, false) } getOrElse {Nil},
        __obj.alternativeName flatMap { scalaxb.toXML[com.bio4j.xsd.AlternativeName](_, Some("http://uniprot.org/uniprot"), Some("alternativeName"), __scope, false) },
        __obj.submittedName flatMap { scalaxb.toXML[com.bio4j.xsd.SubmittedName](_, Some("http://uniprot.org/uniprot"), Some("submittedName"), __scope, false) },
        __obj.allergenName map { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("allergenName"), __scope, false) } getOrElse {Nil},
        __obj.biotechName map { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("biotechName"), __scope, false) } getOrElse {Nil},
        __obj.cdAntigenName flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("cdAntigenName"), __scope, false) },
        __obj.innName flatMap { scalaxb.toXML[com.bio4j.xsd.EvidencedStringType](_, Some("http://uniprot.org/uniprot"), Some("innName"), __scope, false) })


  }


/** Describes different types of biophysicochemical properties.
*/
  trait XsdBpcCommentGroupGroupFormat extends scalaxb.AnyElemNameParser {
    def parseBpcCommentGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.bio4j.xsd.BpcCommentGroupSequence] =
      ((opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "absorption")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "kinetics")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "phDependence")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "redoxPotential")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "temperatureDependence"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 => com.bio4j.xsd.BpcCommentGroupSequence(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.Absorption](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.bio4j.xsd.Kinetics](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.bio4j.xsd.PhDependence](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.bio4j.xsd.RedoxPotential](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.bio4j.xsd.TemperatureDependence](_, scalaxb.ElemName(node) :: stack) }) })
  
    def parseBpcCommentGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      ((opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "absorption")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "kinetics")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "phDependence")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "redoxPotential")) ~ 
      opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "temperatureDependence"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 => scalaxb.DataRecord(com.bio4j.xsd.BpcCommentGroupSequence(p1.headOption map { scalaxb.fromXML[com.bio4j.xsd.Absorption](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[com.bio4j.xsd.Kinetics](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[com.bio4j.xsd.PhDependence](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[com.bio4j.xsd.RedoxPotential](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[com.bio4j.xsd.TemperatureDependence](_, scalaxb.ElemName(node) :: stack) })) })
    
    def parsemixedBpcCommentGroupGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      (((opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "absorption")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Absorption](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "kinetics")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.Kinetics](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "phDependence")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.PhDependence](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "redoxPotential")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.RedoxPotential](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord ~ 
      (opt(scalaxb.ElemName(Some("http://uniprot.org/uniprot"), "temperatureDependence")) ^^ 
      (_ map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[com.bio4j.xsd.TemperatureDependence](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => Seq.concat(p1.toList,
        p2.toList,
        p3.toList,
        p4.toList,
        p5.toList,
        p6.toList,
        p7.toList,
        p8.toList,
        p9.toList,
        p10.toList) })
  }

  trait DefaultXsdBpcCommentGroupSequenceFormat extends scalaxb.XMLFormat[com.bio4j.xsd.BpcCommentGroupSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.bio4j.xsd.BpcCommentGroupSequence] = Left("don't call me.")
    
    def writes(__obj: com.bio4j.xsd.BpcCommentGroupSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.absorption map { scalaxb.toXML[com.bio4j.xsd.Absorption](_, Some("http://uniprot.org/uniprot"), Some("absorption"), __scope, false) } getOrElse {Nil},
        __obj.kinetics map { scalaxb.toXML[com.bio4j.xsd.Kinetics](_, Some("http://uniprot.org/uniprot"), Some("kinetics"), __scope, false) } getOrElse {Nil},
        __obj.phDependence map { scalaxb.toXML[com.bio4j.xsd.PhDependence](_, Some("http://uniprot.org/uniprot"), Some("phDependence"), __scope, false) } getOrElse {Nil},
        __obj.redoxPotential map { scalaxb.toXML[com.bio4j.xsd.RedoxPotential](_, Some("http://uniprot.org/uniprot"), Some("redoxPotential"), __scope, false) } getOrElse {Nil},
        __obj.temperatureDependence map { scalaxb.toXML[com.bio4j.xsd.TemperatureDependence](_, Some("http://uniprot.org/uniprot"), Some("temperatureDependence"), __scope, false) } getOrElse {Nil})


  }


}

